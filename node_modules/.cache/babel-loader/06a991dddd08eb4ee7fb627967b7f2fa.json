{"ast":null,"code":"import BScroll from '@better-scroll/core';\nimport Pullup from '@better-scroll/pull-up';\nBScroll.use(Pullup);\nexport default {\n  name: 'Scroll',\n  props: {\n    probeType: {\n      type: Number,\n      default: 0\n    },\n    pullUpLoad: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      bscroll: null\n    };\n  },\n\n  methods: {\n    // 滚动插件\n    initBscroll() {\n      try {\n        this.bscroll = new BScroll(this.$refs.wrapper, {\n          pullUpLoad: this.pullUpLoad,\n          click: true,\n          probeType: this.probeType,\n          pullingUp: true\n        });\n        this.bscroll.on('pullingUp', this.pullingUpHandler); // this.bscroll.on('pullingUp', () =>  this.bscroll.finishPullUp())\n        // 监听滚动位置\n\n        this.bscroll.on('scroll', position => {\n          this.$emit('scroll', position);\n        }); // 监听上拉事件,实现上拉加载更多\n\n        if (this.pullUpLoad) {\n          this.bscroll.on('pullingUp', () => {\n            this.$emit('pullingup');\n          });\n        }\n      } catch (error) {\n        return error;\n      }\n    },\n\n    async pullingUpHandler() {\n      this.isPullUpLoad = true;\n      await this.requestData();\n      this.bscroll.finishPullUp(); // 重新计算高度\n\n      this.bscroll.refresh();\n      this.isPullUpLoad = false;\n    },\n\n    async requestData() {\n      try {\n        const newData = await this.ajaxGet();\n        this.data += newData;\n      } catch (err) {\n        // handle err\n        console.log(err);\n      }\n    },\n\n    ajaxGet() {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve(20);\n        }, 1000);\n      });\n    },\n\n    scrollTo(x, y, time = 600) {\n      this.bscroll && this.bscroll.scrollTo(x, y, time);\n    },\n\n    refresh() {\n      this.bscroll && this.bscroll.refresh();\n    },\n\n    finishPullUp() {\n      this.bscroll && this.bscroll.finishPullUp();\n    },\n\n    getScrollY() {\n      // console.log(this.bscroll.y)\n      return this.bscroll ? this.bscroll.y : 0;\n    }\n\n  },\n\n  mounted() {\n    this.initBscroll();\n  },\n\n  created() {},\n\n  computed: {},\n  components: {}\n};","map":{"version":3,"mappings":"AAUA;AACA;AACAA;AACA;EACAC,cADA;EAEAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,aADA;MAEAC;IAFA;EALA,CAFA;;EAYAE;IACA;MACAC;IADA;EAGA,CAhBA;;EAiBAC;IACA;IACAC;MACA;QACA;UACAJ,2BADA;UAEAK,WAFA;UAGAR,yBAHA;UAIAS;QAJA;QAMA,oDAPA,CAQA;QACA;;QACA;UACA;QACA,CAFA,EAVA,CAaA;;QACA;UACA;YACA;UACA,CAFA;QAGA;MACA,CAnBA,CAmBA;QACA;MACA;IACA,CAzBA;;IA0BA;MACA;MAEA;MACA,4BAJA,CAKA;;MACA;MACA;IACA,CAlCA;;IAmCA;MACA;QACA;QACA;MACA,CAHA,CAGA;QACA;QACAC;MACA;IACA,CA3CA;;IA4CAC;MACA;QACAC;UACAC;QACA,CAFA,EAEA,IAFA;MAGA,CAJA;IAKA,CAlDA;;IAoDAC;MACA;IACA,CAtDA;;IAuDAC;MACA;IACA,CAzDA;;IA0DAC;MACA;IACA,CA5DA;;IA6DAC;MACA;MACA;IACA;;EAhEA,CAjBA;;EAmFAC;IACA;EACA,CArFA;;EAsFAC,WAEA,CAxFA;;EAyFAC,YAzFA;EA0FAC;AA1FA","names":["BScroll","name","props","probeType","type","default","pullUpLoad","data","bscroll","methods","initBscroll","click","pullingUp","console","ajaxGet","setTimeout","resolve","scrollTo","refresh","finishPullUp","getScrollY","mounted","created","computed","components"],"sourceRoot":"src/components/common/scroll","sources":["Scroll.vue"],"sourcesContent":["<template>\n  <!--  -->\n  <div ref=\"wrapper\">\n    <div class=\"content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nimport BScroll from '@better-scroll/core'\nimport Pullup from '@better-scroll/pull-up'\nBScroll.use(Pullup)\nexport default {\n  name: 'Scroll',\n  props: {\n    probeType: {\n      type: Number,\n      default: 0\n    },\n    pullUpLoad: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      bscroll: null,\n    }\n  },\n  methods: {\n    // 滚动插件\n    initBscroll () {\n      try {\n        this.bscroll = new BScroll(this.$refs.wrapper, {\n          pullUpLoad: this.pullUpLoad,\n          click: true,\n          probeType: this.probeType,\n          pullingUp: true\n        })\n        this.bscroll.on('pullingUp', this.pullingUpHandler)\n        // this.bscroll.on('pullingUp', () =>  this.bscroll.finishPullUp())\n        // 监听滚动位置\n        this.bscroll.on('scroll', (position) => {\n          this.$emit('scroll', position)\n        })\n        // 监听上拉事件,实现上拉加载更多\n        if (this.pullUpLoad) {\n          this.bscroll.on('pullingUp', () => {\n            this.$emit('pullingup')\n          })\n        }\n      } catch (error) {\n        return error\n      }\n    },\n    async pullingUpHandler () {\n      this.isPullUpLoad = true\n\n      await this.requestData()\n      this.bscroll.finishPullUp()\n      // 重新计算高度\n      this.bscroll.refresh()\n      this.isPullUpLoad = false\n    },\n    async requestData () {\n      try {\n        const newData = await this.ajaxGet(/* url */)\n        this.data += newData\n      } catch (err) {\n        // handle err\n        console.log(err)\n      }\n    },\n    ajaxGet (/* url */) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve(20)\n        }, 1000)\n      })\n    },\n\n    scrollTo (x, y, time = 600) {\n      this.bscroll && this.bscroll.scrollTo(x, y, time)\n    },\n    refresh () {\n      this.bscroll && this.bscroll.refresh()\n    },\n    finishPullUp () {\n      this.bscroll && this.bscroll.finishPullUp()\n    },\n    getScrollY () {\n      // console.log(this.bscroll.y)\n      return this.bscroll ? this.bscroll.y : 0\n    }\n  },\n  mounted () {\n    this.initBscroll()\n  },\n  created () {\n\n  },\n  computed: {},\n  components: {},\n}\n</script>\n\n<style scoped>\n</style>\n"]},"metadata":{},"sourceType":"module"}